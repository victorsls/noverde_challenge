diff --git a/challenge/loan/models.py b/challenge/loan/models.py
index 8c9c81d..a80869c 100755
--- a/challenge/loan/models.py
+++ b/challenge/loan/models.py
@@ -1,13 +1,23 @@
 import uuid
+from datetime import date
 
 from django.core.validators import MinValueValidator, MaxValueValidator
 from django.db import models
+from django.db.models.signals import post_save
+from django.dispatch import receiver
+
+from challenge.loan.tasks import age_policy, score_policy, commitment_policy
 
 
 class Loan(models.Model):
-    STATUS_CHOICES = ((1, None), (2, 'processing'), (3, 'completed'))
-    RESULT_CHOICES = ((1, None), (2, 'approved'), (3, 'refused'))
-    REFUSED_POLICY_CHOICES = ((1, None), (2, 'age'), (3, 'score'), (4, 'commitment'))
+    PROCESSING, COMPLETED = 'processing', 'completed'
+    STATUS_CHOICES = ((PROCESSING, PROCESSING), (COMPLETED, COMPLETED))
+
+    APPROVED, REFUSED = 'approved', 'refused'
+    RESULT_CHOICES = ((APPROVED, APPROVED), (REFUSED, REFUSED))
+
+    AGE, SCORE, COMMITMENT = 'age', 'score', 'commitment'
+    REFUSED_POLICY_CHOICES = ((AGE, AGE), (SCORE, SCORE), (COMMITMENT, COMMITMENT))
 
     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
     name = models.CharField(max_length=255)
@@ -16,14 +26,33 @@ class Loan(models.Model):
     amount = models.DecimalField(
         validators=[MinValueValidator(1000), MaxValueValidator(5000)], decimal_places=2, max_digits=6
     )
+    score = models.IntegerField(null=True)
     terms = models.IntegerField()
     income = models.DecimalField(decimal_places=2, max_digits=6)
-    status = models.IntegerField(choices=STATUS_CHOICES, default=1)
-    result = models.IntegerField(choices=RESULT_CHOICES, default=1)
-    refused_policy = models.IntegerField(choices=REFUSED_POLICY_CHOICES, default=1)
+    status = models.CharField(choices=STATUS_CHOICES, max_length=10, null=True)
+    result = models.CharField(choices=RESULT_CHOICES, max_length=10, null=True)
+    refused_policy = models.CharField(choices=REFUSED_POLICY_CHOICES, max_length=10, null=True)
 
     def __str__(self):
         return f'{self.name} - {self.cpf}'
 
+    def calculate_age(self):
+        today = date.today()
+        return today.year - self.birth_date.year - (
+                (today.month, today.day) < (self.birth_date.month, self.birth_date.day)
+        )
+
     class Meta:
         db_table = 'loan'
+
+
+@receiver(post_save, sender=Loan)
+def check_policies(sender, instance, created, **kwargs):
+    if created:
+        age_policy(instance)
+
+        if instance.status == instance.PROCESSING:
+            score_policy(instance)
+
+        if instance.status == instance.PROCESSING:
+            commitment_policy(instance)
diff --git a/challenge/loan/serializers.py b/challenge/loan/serializers.py
index 6a132dd..723fee2 100755
--- a/challenge/loan/serializers.py
+++ b/challenge/loan/serializers.py
@@ -3,22 +3,20 @@ from rest_framework import serializers
 from challenge.loan.models import Loan
 
 
-class LoanSerializer(serializers.ModelSerializer):
+class CreateLoanSerializer(serializers.ModelSerializer):
     birth_date = serializers.DateField(input_formats=['%d/%m/%Y'])
 
     def to_representation(self, instance):
-        if instance.status == 1:
-            data = {
-                'id': instance.id
-            }
+        if not instance.status:
+            data = {'id': instance.id}
         else:
             data = {
-                "id": instance.id,
-                "status": instance.status,
-                "result": instance.result,
-                "refused_policy": instance.refused_policy,
-                "amount": instance.amount,
-                "terms": instance.terms
+                'id': instance.id,
+                'status': instance.status,
+                'result': instance.result,
+                'refused_policy': instance.refused_policy,
+                'amount': instance.amount,
+                'terms': instance.terms
             }
         return data
 
diff --git a/challenge/loan/urls.py b/challenge/loan/urls.py
index cc94ff7..9e3281f 100755
--- a/challenge/loan/urls.py
+++ b/challenge/loan/urls.py
@@ -1,9 +1,9 @@
 from rest_framework import routers
 
-from challenge.loan.views import LoanViewSet
+from challenge.loan.views import CreateLoanViewSet
 
 router = routers.SimpleRouter()
-router.register('loan', LoanViewSet)
+router.register('loan', CreateLoanViewSet)
 urlpatterns = router.urls
 
 app_name = 'loan'
diff --git a/challenge/loan/views.py b/challenge/loan/views.py
index 99797be..0848ff0 100755
--- a/challenge/loan/views.py
+++ b/challenge/loan/views.py
@@ -1,12 +1,14 @@
+from rest_framework.exceptions import MethodNotAllowed
 from rest_framework.viewsets import ModelViewSet
 
 from challenge.loan.models import Loan
-from challenge.loan.serializers import LoanSerializer
+from challenge.loan.serializers import CreateLoanSerializer
 
 
-class LoanViewSet(ModelViewSet):
-    """
-    A simple ViewSet for viewing and editing loans.
-    """
+class CreateLoanViewSet(ModelViewSet):
     queryset = Loan.objects.all()
-    serializer_class = LoanSerializer
+    serializer_class = CreateLoanSerializer
+    http_method_names = ['post', 'get']
+
+    def list(self, request, *args, **kwargs):
+        raise MethodNotAllowed("GET")
diff --git a/challenge/settings.py b/challenge/settings.py
index 9b69fb0..e36ed69 100755
--- a/challenge/settings.py
+++ b/challenge/settings.py
@@ -26,6 +26,7 @@ INSTALLED_APPS = [
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
+    'django_extensions',
     'rest_framework',
     'rest_framework.authtoken',
     'challenge.loan'
@@ -120,3 +121,7 @@ REST_FRAMEWORK = {
         'rest_framework.permissions.IsAuthenticated',
     )
 }
+
+
+NOVERDE_API_KEY = config('NOVERDE_API_KEY')
+NOVERDE_API_URL = config('NOVERDE_API_URL')
diff --git a/docker-compose.yaml b/docker-compose.yaml
index bb8e80f..b3bf269 100644
--- a/docker-compose.yaml
+++ b/docker-compose.yaml
@@ -14,6 +14,8 @@ services:
       - SECRET_KEY=tf$utx+@t(tj&c04i7wva%70ol-uozr3!8$ap=1v_(5vlksxsi
       - ALLOWED_HOSTS=localhost,127.0.0.1,backend
       - DATABASE_URL=postgres://postgres:postgres@db:5432/noverde_challenge
+      - NOVERDE_API_KEY=SnAB7jQEFs1Ai8XtZdssa14gORT3jWPI7TWdXN97
+      - NOVERDE_API_URL=https://challenge.noverde.name
     depends_on:
       - db
   db:
diff --git a/requirements.txt b/requirements.txt
index c716608..10ce687 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,5 +1,7 @@
 dj-database-url==0.5.0
 Django==3.0.8
+django-extensions==3.0.2
 djangorestframework==3.11.0
 psycopg2-binary==2.8.5
-python-decouple==3.3
\ No newline at end of file
+python-decouple==3.3
+requests==2.24.0
\ No newline at end of file
